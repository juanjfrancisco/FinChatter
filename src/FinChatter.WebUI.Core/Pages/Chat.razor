@page "/chat"
@using Blazored.LocalStorage
@inject NavigationManager navigationManager
@inject AuthenticationService finchatterApi
@inject ILocalStorageService _localStorage
@attribute [Authorize]

<h1>Welcome to FinChatter</h1>
<hr />

@*@if (!_isChatting)
    {
    <p>
    Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@StartChat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
    <div class="invalid-feedback">@_message</div>
    <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
    }
    else
    {

    }*@


<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-person mr-2" aria-hidden="true"></span>
    <span>You are connected as <b>@_username</b></span>
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
</div>
    
<div id="scrollbox">
    @foreach (var item in _messages)
    {
        @if (item.IsNotice)
        {
            <div class="alert alert-info">@item.Body</div>
        }
        else
        {
            <div class="@item.CSS">
                <div class="user">@item.Username</div>
                <div class="msg">@item.Body</div>
            </div>
        }
    }
    <hr />
    <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
    <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
</div>
@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    // private bool _isChatting = true;
    private string _username;
    private string _message;
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    protected async override Task OnInitializedAsync()
    {
        await StartChat();
        //return base.OnInitializedAsync();
    }

    public async Task StartChat()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        try
        {

            _username = user.Identity.Name;
            //_isChatting = true;
            await Task.Delay(1);

            _messages.Clear();

            _hubUrl = await _localStorage.GetItemAsync<string>("finChatterUrl");//loginResponse.Data.FinChatterUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<ChatMessage>("SendMessage", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            //Todo: show error
            //_isChatting = false;
        }
    }

    private void BroadcastMessage(ChatMessage message)
    {
        bool isMine = message.UserName.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(message.UserName, message.Message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        //if (_isChatting)
        //{

        //    //_isChatting = false;
        //}

        await SendAsync($"[Notice] {_username} left chat room.");

        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;
        navigationManager.NavigateTo("/");

    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendMessage", new ChatMessage { UserName = _username, Message = message });

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
